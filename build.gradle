plugins {
    id 'java-platform' // 引入 java-platform插件
    id 'maven-publish' // 发布插件，可用来发布 BOM 或 jar到本地与远程仓库
}

group = 'com.gzs.learn'
description = 'maven-bom'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenLocal()

    gradlePluginPortal()

    maven {
        url = uri('https://plugins.gradle.org/m2/')
    }

    maven {
        url = uri('https://maven.aliyun.com/repository/public')
    }

    maven {
        url = uri('https://maven.aliyun.com/repository/apache-snapshots')
    }

//    maven {
//        url = uri('https://packages.aliyun.com/maven/repository/2082403-release-RrOTMm/')
//    }
//
//    maven {
//        url = uri('https://packages.aliyun.com/maven/repository/2082403-snapshot-cI3zbl/')
//    }

    maven {
        url = uri('https://maven.aliyun.com/repository/central')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

// 默认为防止用户错误地引入依赖，而不是引入依赖约束，如果引入依赖会报错失败。
// 通过这个配置可以让Gradle允许引入依赖，当然这是可选的
javaPlatform {
    allowDependencies()
}

ext {
    springBootStarterVersion = '2.4.7'
    zookeeperVersion = '3.7.0'
    commonsPool2Version = '2.9.0'
    dom4jVersion = '2.1.3'
    curatorRecipesVersion = '4.2.0'
    nacosSpringCloudVersion = '2021.1'
    springCloudStarterOpenfeignVersion = '3.0.4'
    tomcatJdbcVersion = '9.0.46'
    caffeineVersion = '2.8.8'
    redissonSpringBootStarterVersion = '3.16.0'
    mysqlConnectorJavaVersion = '8.0.25'
    mapstructProcessorVersion = '1.4.2.Final'
    validationApiVersion = '2.0.1.Final'
    flywayVersion = '7.1.1'
    springCloudStarterCircuitbreakerResilience4jVersion = '2.0.2'
    resilience4jBulkheadVersion = '1.7.0'
    lombokVersion = '1.8.20'
    junitVersion = '5.7.2'
}

dependencies {
    //在constraints块中定义依赖版本约束
    constraints{
        api "org.springframework.boot:spring-boot-starter-web:$springBootStarterVersion"
        api "org.springframework.boot:spring-boot-starter-aop:$springBootStarterVersion"
        api "org.springframework.boot:spring-boot-autoconfigure:$springBootStarterVersion"
        api "org.springframework.boot:spring-boot-starter-test:$springBootStarterVersion"
        api "org.apache.curator:curator-recipes:$curatorRecipesVersion"
        api "org.apache.zookeeper:zookeeper:$zookeeperVersion"
        api "org.dom4j:dom4j:$dom4jVersion"
        api "org.apache.commons:commons-pool2:$commonsPool2Version"
        api "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:$nacosSpringCloudVersion"
        api "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:$nacosSpringCloudVersion"
        api "org.springframework.cloud:spring-cloud-starter-openfeign:$springCloudStarterOpenfeignVersion"
        api "org.springframework.cloud:spring-cloud-starter-loadbalancer:$springCloudStarterOpenfeignVersion"
        api "org.springframework.cloud:spring-cloud-starter-bootstrap:$springCloudStarterOpenfeignVersion"
        api "org.springframework.boot:spring-boot-starter-actuator:$springBootStarterVersion"
        api "org.apache.tomcat:tomcat-jdbc:$tomcatJdbcVersion"
        api "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
        api "org.redisson:redisson-spring-boot-starter:$redissonSpringBootStarterVersion"
        api "mysql:mysql-connector-java:$mysqlConnectorJavaVersion"
        api "org.mapstruct:mapstruct:$mapstructProcessorVersion"
        api "org.mapstruct:mapstruct-processor:$mapstructProcessorVersion"
        api "javax.validation:validation-api:$validationApiVersion"
        api "org.flywaydb:flyway-core:$flywayVersion"
        api "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:$springCloudStarterCircuitbreakerResilience4jVersion"
        api "io.github.resilience4j:resilience4j-bulkhead:$resilience4jBulkheadVersion"
        api "org.projectlombok:lombok:$lombokVersion"
        api "org.springframework.boot:spring-boot-starter-test:$springBootStarterVersion"
        api "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    }
}

publishing{
    publications{
        //以下maven并非关键字，可自定义
        maven(MavenPublication) {
            //通过java-platform生成BOM
            from components.javaPlatform
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
