plugins {
    id 'java-platform' // 引入 java-platform插件
    id 'maven-publish' // 发布插件，可用来发布 BOM 或 jar到本地与远程仓库
    id 'org.springframework.boot' version '2.4.7' apply false
}

group = 'com.gzs.learn'
description = 'maven-bom'
version = '1.0.0-SNAPSHOT'

// 默认为防止用户错误地引入依赖，而不是引入依赖约束，如果引入依赖会报错失败。
// 通过这个配置可以让Gradle允许引入依赖，当然这是可选的
javaPlatform {
    allowDependencies()
}

dependencies {
    constraints {
        api("org.elasticsearch:elasticsearch:${elasticsearchVersion}")
        api("org.elasticsearch.client:transport:${elasticsearchVersion}")
        api("org.elasticsearch.client:elasticsearch-rest-client:${elasticsearchVersion}") {
            // exclude group: 'commons-logging', module: 'commons-logging'
        }
        api("org.elasticsearch.client:elasticsearch-rest-client-sniffer:${elasticsearchVersion}") {
            // exclude group: 'commons-logging', module: 'commons-logging'
        }
        api("org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticsearchVersion}")
        api("org.springframework.boot:spring-boot-dependencies:${springBootVerison}")
        api("org.apache.dubbo:dubbo:${dubboVersion}")
        api("org.apache.commons:commons-lang3:${commonLang3Version}")
        api("redis.clients:jedis:${jedisVersion}")
        api("io.netty:netty-all:${nettyVersion}")
        api("org.apache.curator:curator-framework:${curatorVersion}") {
            // exclude group: 'org.apache.zookeeper', module: 'zookeeper'
        }
        api("org.apache.curator:curator-recipes:${curatorVersion}") {
            // exclude group: 'org.apache.zookeeper', module: 'zookeeper'
        }
        api("org.apache.zookeeper:zookeeper:${zookeeperVersion}") {
            // exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            // exclude group: 'log4j', module: 'log4j'
            // exclude group: 'io.netty', module: '*'
        }
        api("org.apache.httpcomponents:httpclient:${httpclientVersion}")
        api("com.alibaba:fastjson:${fastjsonVersion}")
        api("com.zaxxer:HikariCP:${hikaricpVersion}")
        api("org.apache.commons:commons-dbcp2:${dbcpVersion}")
        api("commons-io:commons-io:${commonsIoVersion}")
        api("pro.fessional:kaptcha:${kaptchaVersion}")
        api("org.ehcache:ehcache:${ehcacheVersion}")
        api("com.google.zxing:core:${zxingVersion}")
        api("org.apache.velocity:velocity:${velocityVersion}")
        api("cglib:cglib-nodep:${cglibNodepVersion}")
        api("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        api("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        api("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        api("com.ctrip.framework.apollo:apollo-client:${apolloVersion}")
        api("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:${nacosSpringCloudStaterVersion}")
        api("com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:${nacosSpringCloudStaterVersion}")
        api("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}")
        api("com.google.guava:guava:${guavaVersion}")
        api("org.apache.shardingsphere:sharding-jdbc-spring-boot-starter:${shardingsphereVersion}")
        api("com.github.xiaoymin:knife4j-spring-boot-starter:${knife4jVersion}")
        api("com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}")
        api("org.apache.dubbo:dubbo-spring-boot-starter:${dubboVersion}")
        api("org.dom4j:dom4j:${dom4jVersion}")
        api("org.bouncycastle:bcprov-jdk15on:${bcprovVersion}")
        api("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        api("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        api("org.mapstruct:mapstruct:${mapstructVersion}")
        api("org.redisson:redisson-spring-boot-starter:${redissonVersion}")
        api("org.codehaus.groovy:groovy:${groovyVersion}")
    }
}

publishing {
    publications {
        nexus(MavenPublication) {
            //通过java-platform生成BOM
            from components.javaPlatform
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? aliyunSnapshotUrl : aliyunReleaseUrl
            credentials {
                username = aliyunUser
                password = aliyunPassword
            }
        }
    }
}

//signing {
//    sign publishing.publications.nexus
//}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
